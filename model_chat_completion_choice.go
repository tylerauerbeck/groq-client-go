/*
Groq API

API for interacting with Groq's language models and audio transcription/translation services

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ChatCompletionChoice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChatCompletionChoice{}

// ChatCompletionChoice struct for ChatCompletionChoice
type ChatCompletionChoice struct {
	Index *int32 `json:"index,omitempty"`
	Message *ChatMessage `json:"message,omitempty"`
	FinishReason *string `json:"finish_reason,omitempty"`
}

// NewChatCompletionChoice instantiates a new ChatCompletionChoice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChatCompletionChoice() *ChatCompletionChoice {
	this := ChatCompletionChoice{}
	return &this
}

// NewChatCompletionChoiceWithDefaults instantiates a new ChatCompletionChoice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChatCompletionChoiceWithDefaults() *ChatCompletionChoice {
	this := ChatCompletionChoice{}
	return &this
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *ChatCompletionChoice) GetIndex() int32 {
	if o == nil || IsNil(o.Index) {
		var ret int32
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionChoice) GetIndexOk() (*int32, bool) {
	if o == nil || IsNil(o.Index) {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *ChatCompletionChoice) HasIndex() bool {
	if o != nil && !IsNil(o.Index) {
		return true
	}

	return false
}

// SetIndex gets a reference to the given int32 and assigns it to the Index field.
func (o *ChatCompletionChoice) SetIndex(v int32) {
	o.Index = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ChatCompletionChoice) GetMessage() ChatMessage {
	if o == nil || IsNil(o.Message) {
		var ret ChatMessage
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionChoice) GetMessageOk() (*ChatMessage, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ChatCompletionChoice) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given ChatMessage and assigns it to the Message field.
func (o *ChatCompletionChoice) SetMessage(v ChatMessage) {
	o.Message = &v
}

// GetFinishReason returns the FinishReason field value if set, zero value otherwise.
func (o *ChatCompletionChoice) GetFinishReason() string {
	if o == nil || IsNil(o.FinishReason) {
		var ret string
		return ret
	}
	return *o.FinishReason
}

// GetFinishReasonOk returns a tuple with the FinishReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionChoice) GetFinishReasonOk() (*string, bool) {
	if o == nil || IsNil(o.FinishReason) {
		return nil, false
	}
	return o.FinishReason, true
}

// HasFinishReason returns a boolean if a field has been set.
func (o *ChatCompletionChoice) HasFinishReason() bool {
	if o != nil && !IsNil(o.FinishReason) {
		return true
	}

	return false
}

// SetFinishReason gets a reference to the given string and assigns it to the FinishReason field.
func (o *ChatCompletionChoice) SetFinishReason(v string) {
	o.FinishReason = &v
}

func (o ChatCompletionChoice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChatCompletionChoice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Index) {
		toSerialize["index"] = o.Index
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.FinishReason) {
		toSerialize["finish_reason"] = o.FinishReason
	}
	return toSerialize, nil
}

type NullableChatCompletionChoice struct {
	value *ChatCompletionChoice
	isSet bool
}

func (v NullableChatCompletionChoice) Get() *ChatCompletionChoice {
	return v.value
}

func (v *NullableChatCompletionChoice) Set(val *ChatCompletionChoice) {
	v.value = val
	v.isSet = true
}

func (v NullableChatCompletionChoice) IsSet() bool {
	return v.isSet
}

func (v *NullableChatCompletionChoice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChatCompletionChoice(val *ChatCompletionChoice) *NullableChatCompletionChoice {
	return &NullableChatCompletionChoice{value: val, isSet: true}
}

func (v NullableChatCompletionChoice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChatCompletionChoice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


