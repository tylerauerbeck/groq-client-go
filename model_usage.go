/*
Groq API

API for interacting with Groq's language models and audio transcription/translation services

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Usage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Usage{}

// Usage struct for Usage
type Usage struct {
	PromptTokens *int32 `json:"prompt_tokens,omitempty"`
	CompletionTokens *int32 `json:"completion_tokens,omitempty"`
	TotalTokens *int32 `json:"total_tokens,omitempty"`
}

// NewUsage instantiates a new Usage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsage() *Usage {
	this := Usage{}
	return &this
}

// NewUsageWithDefaults instantiates a new Usage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsageWithDefaults() *Usage {
	this := Usage{}
	return &this
}

// GetPromptTokens returns the PromptTokens field value if set, zero value otherwise.
func (o *Usage) GetPromptTokens() int32 {
	if o == nil || IsNil(o.PromptTokens) {
		var ret int32
		return ret
	}
	return *o.PromptTokens
}

// GetPromptTokensOk returns a tuple with the PromptTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Usage) GetPromptTokensOk() (*int32, bool) {
	if o == nil || IsNil(o.PromptTokens) {
		return nil, false
	}
	return o.PromptTokens, true
}

// HasPromptTokens returns a boolean if a field has been set.
func (o *Usage) HasPromptTokens() bool {
	if o != nil && !IsNil(o.PromptTokens) {
		return true
	}

	return false
}

// SetPromptTokens gets a reference to the given int32 and assigns it to the PromptTokens field.
func (o *Usage) SetPromptTokens(v int32) {
	o.PromptTokens = &v
}

// GetCompletionTokens returns the CompletionTokens field value if set, zero value otherwise.
func (o *Usage) GetCompletionTokens() int32 {
	if o == nil || IsNil(o.CompletionTokens) {
		var ret int32
		return ret
	}
	return *o.CompletionTokens
}

// GetCompletionTokensOk returns a tuple with the CompletionTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Usage) GetCompletionTokensOk() (*int32, bool) {
	if o == nil || IsNil(o.CompletionTokens) {
		return nil, false
	}
	return o.CompletionTokens, true
}

// HasCompletionTokens returns a boolean if a field has been set.
func (o *Usage) HasCompletionTokens() bool {
	if o != nil && !IsNil(o.CompletionTokens) {
		return true
	}

	return false
}

// SetCompletionTokens gets a reference to the given int32 and assigns it to the CompletionTokens field.
func (o *Usage) SetCompletionTokens(v int32) {
	o.CompletionTokens = &v
}

// GetTotalTokens returns the TotalTokens field value if set, zero value otherwise.
func (o *Usage) GetTotalTokens() int32 {
	if o == nil || IsNil(o.TotalTokens) {
		var ret int32
		return ret
	}
	return *o.TotalTokens
}

// GetTotalTokensOk returns a tuple with the TotalTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Usage) GetTotalTokensOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalTokens) {
		return nil, false
	}
	return o.TotalTokens, true
}

// HasTotalTokens returns a boolean if a field has been set.
func (o *Usage) HasTotalTokens() bool {
	if o != nil && !IsNil(o.TotalTokens) {
		return true
	}

	return false
}

// SetTotalTokens gets a reference to the given int32 and assigns it to the TotalTokens field.
func (o *Usage) SetTotalTokens(v int32) {
	o.TotalTokens = &v
}

func (o Usage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Usage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PromptTokens) {
		toSerialize["prompt_tokens"] = o.PromptTokens
	}
	if !IsNil(o.CompletionTokens) {
		toSerialize["completion_tokens"] = o.CompletionTokens
	}
	if !IsNil(o.TotalTokens) {
		toSerialize["total_tokens"] = o.TotalTokens
	}
	return toSerialize, nil
}

type NullableUsage struct {
	value *Usage
	isSet bool
}

func (v NullableUsage) Get() *Usage {
	return v.value
}

func (v *NullableUsage) Set(val *Usage) {
	v.value = val
	v.isSet = true
}

func (v NullableUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsage(val *Usage) *NullableUsage {
	return &NullableUsage{value: val, isSet: true}
}

func (v NullableUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


